// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradeAgent.Infrastructure.Data;

#nullable disable

namespace TradeAgent.Infrastructure.Migrations
{
    [DbContext(typeof(TradeAgentDbContext))]
    partial class TradeAgentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradeAgent.Domain.Entites.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CounterpartyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("trades", (string)null);
                });

            modelBuilder.Entity("TradeAgent.Domain.OutBox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("outboxmessages", (string)null);
                });

            modelBuilder.Entity("TradeAgent.Domain.Entites.Trade", b =>
                {
                    b.OwnsOne("TradeAgent.Domain.ValueObjects.Asset", "Asset", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("AssetName");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("AssetSymbol");

                            b1.HasKey("TradeId");

                            b1.ToTable("trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId");
                        });

                    b.OwnsOne("TradeAgent.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("TradeId");

                            b1.ToTable("trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId");
                        });

                    b.Navigation("Asset")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
